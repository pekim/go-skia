[
  {
    "name": "SkPaint",
    "doc": [
      "The SkPaint class holds the style and color information about how to draw geometries, text and bitmaps."
    ],

    "constructors": [{}],

    "enums": [
      {
        "name": "Cap",
        "doc": [
          "Cap enum specifies the settings for the paint's strokecap.",
          "This is the treatment that is applied to the beginning and end of each non-closed contour (e.g. lines).",
          "If the cap is round or square, the caps are drawn when the contour has a zero length. Zero length contours can be created by following moveTo with a lineTo at the same point, or a moveTo followed by a close.",
          "A dash with an on interval of zero also creates a zero length contour.",
          "The zero length contour draws the square cap without rotation, since the no direction can be inferred."
        ],

        "constants": [
          { "name": "Butt", "doc": ["begin/end contours with no extension"] },
          {
            "name": "Round",
            "doc": ["begin/end contours with a semi-circle extension"]
          },
          {
            "name": "Square",
            "doc": ["begin/end contours with a half square extension"]
          }
        ]
      },

      {
        "name": "Flags",
        "doc": [
          "Specifies the bit values that are stored in the paint's flags."
        ],
        "constants": [
          { "name": "AntiAlias", "doc": ["mask to enable antialiasing"] },
          {
            "name": "Dither",
            "doc": ["mask to enable dithering. see setDither()"]
          },
          { "name": "FakeBoldText", "doc": ["mask to enable fake-bold text"] },
          { "name": "LinearText", "doc": ["mask to enable linear-text"] },
          {
            "name": "SubpixelText",
            "doc": ["mask to enable subpixel text positioning"]
          },
          {
            "name": "DevKernText",
            "doc": ["mask to enable device kerning text"]
          },
          {
            "name": "LCDRenderText",
            "doc": ["mask to enable subpixel glyph renderering"]
          },
          {
            "name": "EmbeddedBitmapText",
            "doc": ["mask to enable embedded bitmap strikes"]
          },
          {
            "name": "AutoHinting",
            "doc": ["mask to force Freetype's autohinter"]
          }
        ]
      },

      {
        "name": "Join",
        "doc": [
          "Join enum specifies the settings for the paint's strokejoin.",
          "This is the treatment that is applied to corners in paths and rectangles."
        ],
        "constants": [
          {
            "name": "Miter",
            "doc": ["connect path segments with a sharp join"]
          },
          {
            "name": "Round",
            "doc": ["connect path segments with a round join"]
          },
          {
            "name": "Bevel",
            "doc": ["connect path segments with a flat bevel join"]
          }
        ]
      },

      {
        "name": "Style",
        "doc": [
          "Styles apply to rect, oval, path, and text.",
          "Bitmaps are always drawn in \"fill\", and lines are always drawn in \"stroke\".",
          "Note: strokeandfill implicitly draws the result with SkPath::kWinding_FillType, so if the original path is even-odd, the results may not appear the same as if it was drawn twice, filled and then stroked."
        ],
        "constants": [
          { "name": "Fill", "doc": ["fill the geometry"] },
          { "name": "Stroke", "doc": ["stroke the geometry"] },
          { "name": "StrokeAndFill", "doc": ["fill and stroke the geometry"] }
        ]
      },
      {
        "name": "TextEncoding",
        "doc": [
          "Describes how to interpret the text parameters that are passed to paint methods like measureText() and getTextWidths()."
        ],
        "constants": [
          { "name": "UTF8", "doc": ["the text parameters are UTF8"] },
          { "name": "UTF16", "doc": ["the text parameters are UTF16"] },
          { "name": "UTF32", "doc": ["the text parameters are UTF32"] },
          {
            "name": "GlyphID",
            "doc": ["the text parameters are glyph indices"]
          }
        ]
      }
    ]
  }
]
